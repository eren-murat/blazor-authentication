@page "/items"

@using DataAccess
@using DataAccess.Models
@using WinAuth.Components

@inject IJSRuntime JSRuntime
@inject ISqlDataAccess SqlDataAccess
@inject NavigationManager NavigationManager

<h3>Items</h3>

@if (objects is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <input type="button" @onclick="CreateNewComponent" value="New Component" />
    <input type="button" @onclick="Edit" value="Edit" />
    <input type="button" @onclick="SaveAllComponents" value="Save" />
    <input type="button" @onclick="ResetAllPositions" value="Reset Positions" />

    <div style="margin-top: 5px;">
        <p>
            username: <strong>@user.Username</strong>
        </p>
    </div>

    @if (itemCreation is true)
    {
        <div class="item-creation-form">
            <h5>Create new item</h5>
            <EditForm Model="newComponent" OnValidSubmit="HandleValidSubmit">
                <DataAnnotationsValidator />
                <ValidationSummary />

                <table>
                    <tr>
                        <td>TipSelect:</td>
                        <td>
                            <select class="custom-select-sm" @bind="newComponent.Tip" required>
                                <option>--type--</option>
                                @foreach (var type in dataTypes)
                                {
                                    <option>@type</option>
                                }
                            </select>
                        </td>
                    </tr>

                    @*<tr>
                            <td>Tip:</td>
                            <td>
                                <input type="text" @onchange="((ChangeEventArgs e) => ChangeDataType(e.Value.ToString()))" />
                            </td>
                        </tr>*@

                    <tr>
                        <td>Simbol:</td>
                        <td>
                            <input type="text" @bind="newComponent.Simbol" required />
                        </td>
                    </tr>

                    <tr>
                        <td>Data:</td>
                        <td>
                            <input type="date" @bind="newComponent.Data" min="1900-01-01" max="2050-12-31" required />
                        </td>
                    </tr>

                    <tr>
                        <td>Valoare:</td>
                        <td>
                            @if (newComponent.Tip == "DATETIME")
                            {
                                <input type="date" @bind="newComponent.ValoareData" min="1900-01-01" max="2050-12-31" required />
                            }
                            else
                            {
                                <input type="text" @bind="newComponent.ValoareString" required />
                            }
                        </td>
                    </tr>

                    <tr>
                        <td>Referinta:</td>
                        <td>
                            <input type="text" @bind="newComponent.Referinta" required />
                        </td>
                    </tr>
                </table>

                <button type="submit">Create</button>
            </EditForm>
        </div>
    }

    <div id="container">
        @if (editNow is true)
        {
            <div class="details">
                <h5>Inspector:</h5>
                <h5>@itemDetails.Name</h5>

                <EditForm Model="@itemDetails">
                    <table>
                        <tr>
                            <td>Width:</td>
                            <td>
                                <input value="@itemDetails.Width"
                                       @onchange="@((ChangeEventArgs e) => UpdateWidth(e.Value.ToString()))"
                                       style="width: 100%" placeholder="width" />
                            </td>
                        </tr>

                        <tr>
                            <td>Height:</td>
                            <td>
                                <input value="@itemDetails.Height"
                                       @onchange="@((ChangeEventArgs e) => UpdateHeight(e.Value.ToString()))"
                                       style="width: 100%" placeholder="height" />
                            </td>
                        </tr>

                        <tr>
                            <td>Top:</td>
                            <td>
                                <input value="@itemDetails.Top"
                                       @onchange="@((ChangeEventArgs e) => UpdateTop(e.Value.ToString()))"
                                       style="width: 100%" placeholder="top" />
                            </td>
                        </tr>

                        <tr>
                            <td>Left:</td>
                            <td>
                                <input value="@itemDetails.Left"
                                       @onchange="@((ChangeEventArgs e) => UpdateLeft(e.Value.ToString()))"
                                       style="width: 100%" placeholder="left" />
                            </td>
                        </tr>

                        <tr>
                            <td>Color:</td>
                            <td>
                                <input value="@itemDetails.Color"
                                       @onchange="@((ChangeEventArgs e) => UpdateColor(e.Value.ToString()))"
                                       style="width: 100%" placeholder="color" />
                            </td>
                        </tr>

                        <tr>
                            <td>Border:</td>
                            <td>
                                <input value="@itemDetails.Border"
                                       @onchange="@((ChangeEventArgs e) => UpdateBorder(e.Value.ToString()))"
                                       style="width: 100%" placeholder="border" />
                            </td>
                        </tr>

                        <tr>
                            <td>Font size:</td>
                            <td>
                                <input value="@itemDetails.FontSize"
                                       @onchange="@((ChangeEventArgs e) => UpdateFontSize(e.Value.ToString()))"
                                       style="width: 100%" placeholder="font size" />
                            </td>
                        </tr>

                    </table>
                </EditForm>
            </div>
        }

        @foreach (var item in rows)
        {
            <div>
                <DraggableLabel Item="item" />

                <DraggableControl Item="item" />
            </div>
        }
    </div>
}

@code {
    private IEnumerable<ObjModel> objects;

    private List<ObjModExtended> rows = new List<ObjModExtended>();

    private Details itemDetails = new Details();

    private ObjModExtended newComponent = new ObjModExtended();

    private User user = new User();

    private bool itemCreation = false;

    private List<string> dataTypes = new List<string> { "INT", "VARCHAR(255)", "DATETIME", "other..." };

    private bool editable = false;

    private bool editNow = false;

    private bool reset = false;

    protected override async Task OnInitializedAsync()
    {
        objects = await SqlDataAccess.LoadData();

        int idCount = 0;

        foreach (var item in objects)
        {
            ObjModExtended temp = new ObjModExtended();

            temp.CopyFields(item, SqlDataAccess);

            temp.ProprietatiLabel = await SqlDataAccess.GetLabelPropertyByID(item.Id);
            temp.ProprietatiControl = await SqlDataAccess.GetControlPropertyByID(item.Id);

            ++idCount;
            temp.ProprietatiLabel.IdHtml = idCount;
            ++idCount;
            temp.ProprietatiControl.IdHtml = idCount;

            // Console.WriteLine(temp.ProprietatiLabel.IdHtml + " " + temp.ProprietatiLabel.TopOffset + " " + temp.ProprietatiLabel.Color);

            rows.Add(temp);
        }

        user = await SqlDataAccess.GetSqlUsername();

        editable = true;
    }

    private void CreateNewComponent()
    {
        itemCreation = true;

        // NavigationManager.NavigateTo("/items/new-item");
    }

    private void HandleValidSubmit()
    {
        // generate unique id
        newComponent.Id = GenerateRandomId();

        if (newComponent.Tip == "INT")
        {
            string[] options = newComponent.ValoareString.Split(';');
            newComponent.Valori = new List<int>();

            foreach (var opt in options)
            {
                newComponent.Valori.Add(Int32.Parse(opt));
            }
        }

        newComponent.ValoareInt = -1;

        newComponent.Grupare = rows.ElementAt(0).Grupare;
        newComponent.Activ = -1;
        newComponent.Ordine = rows.Last().Ordine + 1;

        Properties propsLabel = new Properties();
        Properties propsControl = new Properties();

        propsLabel.IdHtml = rows.Last().ProprietatiLabel.IdHtml + 2;
        propsLabel.TopOffset = "0px";
        propsLabel.LeftOffset = "0xp";
        propsLabel.Width = "150px";
        propsLabel.Height = "55px";
        propsLabel.Color = "rgb(255, 255, 255)";
        propsLabel.Border = "1px solid rgba(136, 136, 136, 0.5)";
        propsLabel.FontSize = "16px";
        newComponent.ProprietatiLabel = propsLabel;

        propsControl.IdHtml = rows.Last().ProprietatiControl.IdHtml + 2;
        propsControl.TopOffset = "0px";
        propsControl.LeftOffset = "0xp";
        if (newComponent.Tip == "INT")
        {
            propsControl.Width = "145px";
        }
        else if (newComponent.Tip == "VARCHAR(255)")
        {
            propsControl.Width = "245px";
        }
        else if (newComponent.Tip == "DATETIME")
        {
            propsControl.Width = "195px";
        }
        else
        {
            propsControl.Width = "95px";
        }
        propsControl.Height = "55px";
        propsControl.Color = "rgb(255, 255, 255)";
        propsControl.Border = "1px solid rgba(136, 136, 136, 0.5)";
        propsControl.FontSize = "16px";
        newComponent.ProprietatiControl = propsControl;

        itemCreation = false;
        rows.Add(newComponent);

        newComponent = new ObjModExtended();
    }

    private int GenerateRandomId()
    {
        var exclude = new HashSet<int>();
        foreach (var row in rows)
        {
            exclude.Add(row.Id);
        }

        var range = Enumerable.Range(1, 1000).Where(i => !exclude.Contains(i));

        var rand = new System.Random();
        int index = rand.Next(0, 1000 - exclude.Count);

        // Console.WriteLine(range.ElementAt(index));

        return range.ElementAt(index);
    }

    private async void Edit()
    {
        if (editable)
        {
            var dotNetReference = DotNetObjectReference.Create(this);
            await JSRuntime.InvokeVoidAsync("draggable", dotNetReference);

            editNow = true;
            reset = true;

            StateHasChanged();
        }
    }

    private void SaveAllComponents()
    {
        if (editNow || reset)
        {
            foreach (var item in rows)
            {
                // save all changes to db
                SqlDataAccess.UpdateLabelProperty(item.ProprietatiLabel, item.Id);
                SqlDataAccess.UpdateControlProperty(item.ProprietatiControl, item.Id);
            }

            editNow = false;
            reset = false;
        }
    }

    private void ResetAllPositions()
    {
        foreach (var item in rows)
        {
            item.ProprietatiLabel.TopOffset = "0px";
            item.ProprietatiLabel.LeftOffset = "0px";

            item.ProprietatiControl.TopOffset = "0px";
            item.ProprietatiControl.LeftOffset = "0px";
        }

        reset = true;
    }

    [JSInvokable("SavePosition")]
    public void UpdatePosition(string id, string topOffset, string leftOffset, string className)
    {
        int itemID;
        bool res = int.TryParse(id, out itemID);
        if (!res)
        {
            Console.WriteLine("ret1");
            return;
        }

        int dragTopOffset;
        res = int.TryParse(topOffset, out dragTopOffset);
        if (!res)
        {
            Console.WriteLine("ret2");
            return;
        }

        int dragLeftOffset;
        res = int.TryParse(leftOffset, out dragLeftOffset);
        if (!res)
        {
            Console.WriteLine("ret3");
            return;
        }

        int index = 0;
        if (className == "item-label")
        {
            index = rows.FindIndex(x => x.ProprietatiLabel.IdHtml == itemID);
            if (index == -1)
            {
                return;
            }
        }
        else if (className == "item-control")
        {
            index = rows.FindIndex(x => x.ProprietatiControl.IdHtml == itemID);
            if (index == -1)
            {
                return;
            }
        }

        // Console.WriteLine("save: " + itemID + " " + dragTopOffset + " " + dragLeftOffset);

        if (className == "item-label")
        {
            int currentTopOffset = Int32.Parse(rows.ElementAt(index).ProprietatiLabel.TopOffset.Substring(0, rows.ElementAt(index).ProprietatiLabel.TopOffset.Length - 2));
            int currentLeftOffset = Int32.Parse(rows.ElementAt(index).ProprietatiLabel.LeftOffset.Substring(0, rows.ElementAt(index).ProprietatiLabel.LeftOffset.Length - 2));

            int newTopOffset = currentTopOffset + dragTopOffset;
            int newLeftOffset = currentLeftOffset + dragLeftOffset;

            rows.ElementAt(index).ProprietatiLabel.TopOffset = newTopOffset + "px";
            rows.ElementAt(index).ProprietatiLabel.LeftOffset = newLeftOffset + "px";

        }
        else if (className == "item-control")
        {
            int currentTopOffset = Int32.Parse(rows.ElementAt(index).ProprietatiControl.TopOffset.Substring(0, rows.ElementAt(index).ProprietatiControl.TopOffset.Length - 2));
            int currentLeftOffset = Int32.Parse(rows.ElementAt(index).ProprietatiControl.LeftOffset.Substring(0, rows.ElementAt(index).ProprietatiControl.LeftOffset.Length - 2));

            int newTopOffset = currentTopOffset + dragTopOffset;
            int newLeftOffset = currentLeftOffset + dragLeftOffset;


            rows.ElementAt(index).ProprietatiControl.TopOffset = newTopOffset + "px";
            rows.ElementAt(index).ProprietatiControl.LeftOffset = newLeftOffset + "px";
        }
    }

    [JSInvokable("GetDetails")]
    public void DisplayDetails(string id, string className, string width, string height, string top, string left, string color, string border, string fontSize)
    {
        int itemID;
        bool res = int.TryParse(id, out itemID);
        if (!res)
        {
            Console.WriteLine("ret1");
            return;
        }

        int index = 0;
        if (className == "item-label")
        {
            index = rows.FindIndex(x => x.ProprietatiLabel.IdHtml == itemID);
            if (index == -1)
            {
                return;
            }
        }
        else if (className == "item-control")
        {
            index = rows.FindIndex(x => x.ProprietatiControl.IdHtml == itemID);
            if (index == -1)
            {
                return;
            }
        }

        itemDetails.Name = rows.ElementAt(index).Simbol;
        if (className == "item-label")
        {
            itemDetails.Name += " (label)";
        }
        else if (className == "item-control")
        {
            itemDetails.Name += " (control)";
        }

        // Console.WriteLine(id + className + width + height + top + left + color + border + fontSize);

        itemDetails.Id = itemID;
        itemDetails.ClassName = className;
        itemDetails.Width = width;
        itemDetails.Height = height;
        itemDetails.Top = top;
        itemDetails.Left = left;
        itemDetails.Color = color;
        itemDetails.Border = border;
        itemDetails.FontSize = fontSize;

        StateHasChanged();

        // Console.WriteLine(itemDetails.Width + " " + itemDetails.Height + " " + itemDetails.Top + " " + itemDetails.Left + " " + itemDetails.Color + " " + itemDetails.Border);
    }

    private void UpdateProperty(Props propertyName, string value)
    {
        int index;

        if (itemDetails.ClassName == "item-label")
        {
            index = rows.FindIndex(x => x.ProprietatiLabel.IdHtml == itemDetails.Id);
            if (index == -1)
            {
                return;
            }

            rows.ElementAt(index).ProprietatiLabel.SetProperty(propertyName, value);

            Console.WriteLine(propertyName + " " + value);
        }
        else if (itemDetails.ClassName == "item-control")
        {
            index = rows.FindIndex(x => x.ProprietatiControl.IdHtml == itemDetails.Id);
            if (index == -1)
            {
                return;
            }

            rows.ElementAt(index).ProprietatiControl.SetProperty(propertyName, value);

            Console.WriteLine(propertyName + " " + value);
        }
    }

    public void UpdateWidth(string width)
    {
        // await JSRuntime.InvokeVoidAsync("updateWidth", itemDetails.Id, width);

        UpdateProperty(Props.Width, width);
    }

    public void UpdateHeight(string height)
    {
        // await JSRuntime.InvokeVoidAsync("updateHeight", itemDetails.Id, height);

        UpdateProperty(Props.Height, height);
    }

    public void UpdateTop(string top)
    {
        // await JSRuntime.InvokeVoidAsync("updateTop", itemDetails.Id, top);

        UpdateProperty(Props.Top, top);
    }

    public void UpdateLeft(string left)
    {
        // await JSRuntime.InvokeVoidAsync("updateLeft", itemDetails.Id, left);

        UpdateProperty(Props.Left, left);
    }

    public void UpdateColor(string color)
    {
        // await JSRuntime.InvokeVoidAsync("updateColor", itemDetails.Id, color);

        UpdateProperty(Props.Color, color);
    }

    public void UpdateBorder(string border)
    {
        // await JSRuntime.InvokeVoidAsync("updateBorder", itemDetails.Id, border);

        UpdateProperty(Props.Border, border);
    }

    public void UpdateFontSize(string fontSize)
    {
        // await JSRuntime.InvokeVoidAsync("updateFontSize", itemDetails.Id, fontSize);

        UpdateProperty(Props.FontSize, fontSize);
    }
}
